package routines;

import java.io.*;
import java.security.*;

import javax.crypto.*;
import javax.crypto.spec.*;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public final class Encryption
{
	private static byte[] Key(String seed) throws UnsupportedEncodingException, NoSuchAlgorithmException
	{
		byte[] key = new byte[32];
		
		MessageDigest digest = MessageDigest.getInstance("SHA1");		
		byte[] hash = digest.digest(seed.getBytes("UTF-16LE"));
		
		for (int i = 0; i < 32; i++)
		{
			if (i < 20) key[i] = hash[i];
			else key[i] = hash[i - 20];
		}
		
		return key;
	}
	
	private static byte[] Vector(String seed) throws UnsupportedEncodingException, NoSuchAlgorithmException
	{
		byte[] vector = new byte[16];
		
		MessageDigest digest = MessageDigest.getInstance("SHA1");
		byte[] hash = digest.digest(seed.getBytes("UTF-16LE"));
		
		for (int i = 0; i < 16; i++) vector[i] = hash[i];
		
		return vector;
	}
	
	public static String Decrypt(byte[] data, String seed) throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException
	{
		String result;
		
		if (data == null || data.length == 0) return null;
		
		byte[] iv = Vector(seed);
		byte[] key = Key(seed);
		
		IvParameterSpec ivspec = new IvParameterSpec(iv);
		SecretKey secret = new SecretKeySpec(key, "AES");
		
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
		cipher.init(Cipher.DECRYPT_MODE, secret, ivspec);
		result = new String(cipher.doFinal(data));
		
		return result;
	}
	
	public static byte[] Encrypt(String data, String seed) throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException
	{
		byte[] result;
		
		if (data == null || data.length() == 0) return null;
		
		byte[] iv = Vector(seed);
		byte[] key = Key(seed);
		
		IvParameterSpec ivspec = new IvParameterSpec(iv);
		SecretKey secret = new SecretKeySpec(key, "AES");
		
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
		cipher.init(Cipher.ENCRYPT_MODE, secret, ivspec);
		result = cipher.doFinal(data.getBytes());
		return result;
	}
}
